// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: http_dto.proto

package dto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Bot_Captcha_CaptchaType int32

const (
	Bot_Captcha_PIC_CAPTCHA                Bot_Captcha_CaptchaType = 0
	Bot_Captcha_SLIDER_CAPTCHA             Bot_Captcha_CaptchaType = 1
	Bot_Captcha_UNSAFE_DEVICE_LOGIN_VERIFY Bot_Captcha_CaptchaType = 2
	Bot_Captcha_SMS                        Bot_Captcha_CaptchaType = 4
)

var Bot_Captcha_CaptchaType_name = map[int32]string{
	0: "PIC_CAPTCHA",
	1: "SLIDER_CAPTCHA",
	2: "UNSAFE_DEVICE_LOGIN_VERIFY",
	4: "SMS",
}

var Bot_Captcha_CaptchaType_value = map[string]int32{
	"PIC_CAPTCHA":                0,
	"SLIDER_CAPTCHA":             1,
	"UNSAFE_DEVICE_LOGIN_VERIFY": 2,
	"SMS":                        4,
}

func (x Bot_Captcha_CaptchaType) String() string {
	return proto.EnumName(Bot_Captcha_CaptchaType_name, int32(x))
}

func (Bot_Captcha_CaptchaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{0, 0, 0}
}

type QRCodeLoginResp_QRCodeLoginState int32

const (
	QRCodeLoginResp_Unknown                 QRCodeLoginResp_QRCodeLoginState = 0
	QRCodeLoginResp_QRCodeImageFetch        QRCodeLoginResp_QRCodeLoginState = 1
	QRCodeLoginResp_QRCodeWaitingForScan    QRCodeLoginResp_QRCodeLoginState = 2
	QRCodeLoginResp_QRCodeWaitingForConfirm QRCodeLoginResp_QRCodeLoginState = 3
	QRCodeLoginResp_QRCodeTimeout           QRCodeLoginResp_QRCodeLoginState = 4
	QRCodeLoginResp_QRCodeConfirmed         QRCodeLoginResp_QRCodeLoginState = 5
	QRCodeLoginResp_QRCodeCanceled          QRCodeLoginResp_QRCodeLoginState = 6
)

var QRCodeLoginResp_QRCodeLoginState_name = map[int32]string{
	0: "Unknown",
	1: "QRCodeImageFetch",
	2: "QRCodeWaitingForScan",
	3: "QRCodeWaitingForConfirm",
	4: "QRCodeTimeout",
	5: "QRCodeConfirmed",
	6: "QRCodeCanceled",
}

var QRCodeLoginResp_QRCodeLoginState_value = map[string]int32{
	"Unknown":                 0,
	"QRCodeImageFetch":        1,
	"QRCodeWaitingForScan":    2,
	"QRCodeWaitingForConfirm": 3,
	"QRCodeTimeout":           4,
	"QRCodeConfirmed":         5,
	"QRCodeCanceled":          6,
}

func (x QRCodeLoginResp_QRCodeLoginState) String() string {
	return proto.EnumName(QRCodeLoginResp_QRCodeLoginState_name, int32(x))
}

func (QRCodeLoginResp_QRCodeLoginState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{11, 0}
}

type Bot struct {
	BotId                int64        `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	IsOnline             bool         `protobuf:"varint,2,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	Captcha              *Bot_Captcha `protobuf:"bytes,3,opt,name=captcha,proto3" json:"captcha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Bot) Reset()         { *m = Bot{} }
func (m *Bot) String() string { return proto.CompactTextString(m) }
func (*Bot) ProtoMessage()    {}
func (*Bot) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{0}
}
func (m *Bot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bot.Merge(m, src)
}
func (m *Bot) XXX_Size() int {
	return m.Size()
}
func (m *Bot) XXX_DiscardUnknown() {
	xxx_messageInfo_Bot.DiscardUnknown(m)
}

var xxx_messageInfo_Bot proto.InternalMessageInfo

func (m *Bot) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *Bot) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *Bot) GetCaptcha() *Bot_Captcha {
	if m != nil {
		return m.Captcha
	}
	return nil
}

type Bot_Captcha struct {
	BotId       int64                   `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CaptchaType Bot_Captcha_CaptchaType `protobuf:"varint,2,opt,name=captcha_type,json=captchaType,proto3,enum=dto.Bot_Captcha_CaptchaType" json:"captcha_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Bot_Captcha_Url
	//	*Bot_Captcha_Image
	Data                 isBot_Captcha_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Bot_Captcha) Reset()         { *m = Bot_Captcha{} }
func (m *Bot_Captcha) String() string { return proto.CompactTextString(m) }
func (*Bot_Captcha) ProtoMessage()    {}
func (*Bot_Captcha) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{0, 0}
}
func (m *Bot_Captcha) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bot_Captcha) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bot_Captcha.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bot_Captcha) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bot_Captcha.Merge(m, src)
}
func (m *Bot_Captcha) XXX_Size() int {
	return m.Size()
}
func (m *Bot_Captcha) XXX_DiscardUnknown() {
	xxx_messageInfo_Bot_Captcha.DiscardUnknown(m)
}

var xxx_messageInfo_Bot_Captcha proto.InternalMessageInfo

type isBot_Captcha_Data interface {
	isBot_Captcha_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Bot_Captcha_Url struct {
	Url string `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
}
type Bot_Captcha_Image struct {
	Image []byte `protobuf:"bytes,4,opt,name=image,proto3,oneof" json:"image,omitempty"`
}

func (*Bot_Captcha_Url) isBot_Captcha_Data()   {}
func (*Bot_Captcha_Image) isBot_Captcha_Data() {}

func (m *Bot_Captcha) GetData() isBot_Captcha_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Bot_Captcha) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *Bot_Captcha) GetCaptchaType() Bot_Captcha_CaptchaType {
	if m != nil {
		return m.CaptchaType
	}
	return Bot_Captcha_PIC_CAPTCHA
}

func (m *Bot_Captcha) GetUrl() string {
	if x, ok := m.GetData().(*Bot_Captcha_Url); ok {
		return x.Url
	}
	return ""
}

func (m *Bot_Captcha) GetImage() []byte {
	if x, ok := m.GetData().(*Bot_Captcha_Image); ok {
		return x.Image
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Bot_Captcha) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Bot_Captcha_Url)(nil),
		(*Bot_Captcha_Image)(nil),
	}
}

// 创建机器人 /bot/create/v1/
type CreateBotReq struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	DeviceSeed           int64    `protobuf:"varint,3,opt,name=device_seed,json=deviceSeed,proto3" json:"device_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBotReq) Reset()         { *m = CreateBotReq{} }
func (m *CreateBotReq) String() string { return proto.CompactTextString(m) }
func (*CreateBotReq) ProtoMessage()    {}
func (*CreateBotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{1}
}
func (m *CreateBotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBotReq.Merge(m, src)
}
func (m *CreateBotReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateBotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBotReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBotReq proto.InternalMessageInfo

func (m *CreateBotReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *CreateBotReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateBotReq) GetDeviceSeed() int64 {
	if m != nil {
		return m.DeviceSeed
	}
	return 0
}

type CreateBotResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBotResp) Reset()         { *m = CreateBotResp{} }
func (m *CreateBotResp) String() string { return proto.CompactTextString(m) }
func (*CreateBotResp) ProtoMessage()    {}
func (*CreateBotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{2}
}
func (m *CreateBotResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBotResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBotResp.Merge(m, src)
}
func (m *CreateBotResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateBotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBotResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBotResp proto.InternalMessageInfo

// 删除机器人 /bot/delete/v1/
type DeleteBotReq struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBotReq) Reset()         { *m = DeleteBotReq{} }
func (m *DeleteBotReq) String() string { return proto.CompactTextString(m) }
func (*DeleteBotReq) ProtoMessage()    {}
func (*DeleteBotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{3}
}
func (m *DeleteBotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBotReq.Merge(m, src)
}
func (m *DeleteBotReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBotReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBotReq proto.InternalMessageInfo

func (m *DeleteBotReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type DeleteBotResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBotResp) Reset()         { *m = DeleteBotResp{} }
func (m *DeleteBotResp) String() string { return proto.CompactTextString(m) }
func (*DeleteBotResp) ProtoMessage()    {}
func (*DeleteBotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{4}
}
func (m *DeleteBotResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBotResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBotResp.Merge(m, src)
}
func (m *DeleteBotResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBotResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBotResp proto.InternalMessageInfo

// 查询机器人 /bot/list/v1/
type ListBotReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBotReq) Reset()         { *m = ListBotReq{} }
func (m *ListBotReq) String() string { return proto.CompactTextString(m) }
func (*ListBotReq) ProtoMessage()    {}
func (*ListBotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{5}
}
func (m *ListBotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBotReq.Merge(m, src)
}
func (m *ListBotReq) XXX_Size() int {
	return m.Size()
}
func (m *ListBotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBotReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBotReq proto.InternalMessageInfo

type ListBotResp struct {
	BotList              []*Bot   `protobuf:"bytes,1,rep,name=bot_list,json=botList,proto3" json:"bot_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBotResp) Reset()         { *m = ListBotResp{} }
func (m *ListBotResp) String() string { return proto.CompactTextString(m) }
func (*ListBotResp) ProtoMessage()    {}
func (*ListBotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{6}
}
func (m *ListBotResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBotResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBotResp.Merge(m, src)
}
func (m *ListBotResp) XXX_Size() int {
	return m.Size()
}
func (m *ListBotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBotResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListBotResp proto.InternalMessageInfo

func (m *ListBotResp) GetBotList() []*Bot {
	if m != nil {
		return m.BotList
	}
	return nil
}

// 处理验证码 /captcha/solve/v1/
type SolveCaptchaReq struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveCaptchaReq) Reset()         { *m = SolveCaptchaReq{} }
func (m *SolveCaptchaReq) String() string { return proto.CompactTextString(m) }
func (*SolveCaptchaReq) ProtoMessage()    {}
func (*SolveCaptchaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{7}
}
func (m *SolveCaptchaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SolveCaptchaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SolveCaptchaReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SolveCaptchaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveCaptchaReq.Merge(m, src)
}
func (m *SolveCaptchaReq) XXX_Size() int {
	return m.Size()
}
func (m *SolveCaptchaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveCaptchaReq.DiscardUnknown(m)
}

var xxx_messageInfo_SolveCaptchaReq proto.InternalMessageInfo

func (m *SolveCaptchaReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SolveCaptchaReq) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type SolveCaptchaResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveCaptchaResp) Reset()         { *m = SolveCaptchaResp{} }
func (m *SolveCaptchaResp) String() string { return proto.CompactTextString(m) }
func (*SolveCaptchaResp) ProtoMessage()    {}
func (*SolveCaptchaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{8}
}
func (m *SolveCaptchaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SolveCaptchaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SolveCaptchaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SolveCaptchaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveCaptchaResp.Merge(m, src)
}
func (m *SolveCaptchaResp) XXX_Size() int {
	return m.Size()
}
func (m *SolveCaptchaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveCaptchaResp.DiscardUnknown(m)
}

var xxx_messageInfo_SolveCaptchaResp proto.InternalMessageInfo

// 获取二维码 /qrcode/fetch/v1/
type FetchQRCodeReq struct {
	DeviceSeed           int64    `protobuf:"varint,1,opt,name=device_seed,json=deviceSeed,proto3" json:"device_seed,omitempty"`
	Protocal             int      `json:"protocal"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchQRCodeReq) Reset()         { *m = FetchQRCodeReq{} }
func (m *FetchQRCodeReq) String() string { return proto.CompactTextString(m) }
func (*FetchQRCodeReq) ProtoMessage()    {}
func (*FetchQRCodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{9}
}
func (m *FetchQRCodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchQRCodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchQRCodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchQRCodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchQRCodeReq.Merge(m, src)
}
func (m *FetchQRCodeReq) XXX_Size() int {
	return m.Size()
}
func (m *FetchQRCodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchQRCodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_FetchQRCodeReq proto.InternalMessageInfo

func (m *FetchQRCodeReq) GetDeviceSeed() int64 {
	if m != nil {
		return m.DeviceSeed
	}
	return 0
}

// 查询二维码状态 /qrcode/query/v1/
type QueryQRCodeStatusReq struct {
	Sig                  []byte   `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	BotId                int64    `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryQRCodeStatusReq) Reset()         { *m = QueryQRCodeStatusReq{} }
func (m *QueryQRCodeStatusReq) String() string { return proto.CompactTextString(m) }
func (*QueryQRCodeStatusReq) ProtoMessage()    {}
func (*QueryQRCodeStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{10}
}
func (m *QueryQRCodeStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQRCodeStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQRCodeStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQRCodeStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQRCodeStatusReq.Merge(m, src)
}
func (m *QueryQRCodeStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryQRCodeStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQRCodeStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQRCodeStatusReq proto.InternalMessageInfo

func (m *QueryQRCodeStatusReq) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *QueryQRCodeStatusReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

// 二维码登陆响应（获取和查询统一）
type QRCodeLoginResp struct {
	State                QRCodeLoginResp_QRCodeLoginState `protobuf:"varint,1,opt,name=state,proto3,enum=dto.QRCodeLoginResp_QRCodeLoginState" json:"state,omitempty"`
	ImageData            []byte                           `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	Sig                  []byte                           `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *QRCodeLoginResp) Reset()         { *m = QRCodeLoginResp{} }
func (m *QRCodeLoginResp) String() string { return proto.CompactTextString(m) }
func (*QRCodeLoginResp) ProtoMessage()    {}
func (*QRCodeLoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{11}
}
func (m *QRCodeLoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QRCodeLoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QRCodeLoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QRCodeLoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeLoginResp.Merge(m, src)
}
func (m *QRCodeLoginResp) XXX_Size() int {
	return m.Size()
}
func (m *QRCodeLoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeLoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeLoginResp proto.InternalMessageInfo

func (m *QRCodeLoginResp) GetState() QRCodeLoginResp_QRCodeLoginState {
	if m != nil {
		return m.State
	}
	return QRCodeLoginResp_Unknown
}

func (m *QRCodeLoginResp) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (m *QRCodeLoginResp) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterEnum("dto.Bot_Captcha_CaptchaType", Bot_Captcha_CaptchaType_name, Bot_Captcha_CaptchaType_value)
	proto.RegisterEnum("dto.QRCodeLoginResp_QRCodeLoginState", QRCodeLoginResp_QRCodeLoginState_name, QRCodeLoginResp_QRCodeLoginState_value)
	proto.RegisterType((*Bot)(nil), "dto.Bot")
	proto.RegisterType((*Bot_Captcha)(nil), "dto.Bot.Captcha")
	proto.RegisterType((*CreateBotReq)(nil), "dto.CreateBotReq")
	proto.RegisterType((*CreateBotResp)(nil), "dto.CreateBotResp")
	proto.RegisterType((*DeleteBotReq)(nil), "dto.DeleteBotReq")
	proto.RegisterType((*DeleteBotResp)(nil), "dto.DeleteBotResp")
	proto.RegisterType((*ListBotReq)(nil), "dto.ListBotReq")
	proto.RegisterType((*ListBotResp)(nil), "dto.ListBotResp")
	proto.RegisterType((*SolveCaptchaReq)(nil), "dto.SolveCaptchaReq")
	proto.RegisterType((*SolveCaptchaResp)(nil), "dto.SolveCaptchaResp")
	proto.RegisterType((*FetchQRCodeReq)(nil), "dto.FetchQRCodeReq")
	proto.RegisterType((*QueryQRCodeStatusReq)(nil), "dto.QueryQRCodeStatusReq")
	proto.RegisterType((*QRCodeLoginResp)(nil), "dto.QRCodeLoginResp")
}

func init() { proto.RegisterFile("http_dto.proto", fileDescriptor_3b5f7d4a2149a8d0) }

var fileDescriptor_3b5f7d4a2149a8d0 = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0xe3, 0xfc, 0x1e, 0x7b, 0x93, 0xe9, 0xd9, 0xec, 0x12, 0xb2, 0x10, 0x22, 0xa3, 0x95,
	0x22, 0x84, 0x2a, 0x11, 0x6e, 0x90, 0xb8, 0x58, 0x1a, 0x27, 0x21, 0x91, 0xc2, 0xfe, 0x8c, 0xbb,
	0x8b, 0x10, 0x17, 0x96, 0x13, 0x0f, 0xa9, 0x45, 0xea, 0x31, 0x9e, 0xc9, 0x56, 0x7d, 0x13, 0x1e,
	0x01, 0xf1, 0x24, 0x5c, 0x72, 0xcd, 0x55, 0x55, 0xde, 0x80, 0x27, 0x40, 0x1e, 0x3b, 0xa9, 0x93,
	0xa6, 0xda, 0xab, 0xf6, 0x7c, 0xf3, 0x7d, 0xdf, 0x99, 0x73, 0xe6, 0x73, 0xa0, 0x71, 0x21, 0x65,
	0xe4, 0xfa, 0x92, 0x9f, 0x46, 0x31, 0x97, 0x1c, 0x75, 0x5f, 0x72, 0xeb, 0x9f, 0x22, 0xe8, 0x43,
	0x2e, 0xf1, 0x09, 0x54, 0x16, 0x5c, 0xba, 0x81, 0xdf, 0xd6, 0x7a, 0x5a, 0x5f, 0xa7, 0xe5, 0x05,
	0x97, 0x33, 0x1f, 0x9f, 0x41, 0x3d, 0x10, 0x2e, 0x0f, 0xd7, 0x41, 0xc8, 0xda, 0xc5, 0x9e, 0xd6,
	0xaf, 0xd1, 0x5a, 0x20, 0x5e, 0xa9, 0x1a, 0xbf, 0x80, 0xea, 0xd2, 0x8b, 0xe4, 0xf2, 0xc2, 0x6b,
	0xeb, 0x3d, 0xad, 0x6f, 0x0c, 0xc8, 0x69, 0xe2, 0x3e, 0xe4, 0xf2, 0xd4, 0x4e, 0x71, 0xba, 0x25,
	0x74, 0xfe, 0xd3, 0xa0, 0x9a, 0x81, 0x0f, 0xf5, 0x7a, 0x01, 0x66, 0xc6, 0x76, 0xe5, 0x75, 0x94,
	0xb6, 0x6b, 0x0c, 0x3e, 0x39, 0xf4, 0xdc, 0xfe, 0x3d, 0xbf, 0x8e, 0x18, 0x35, 0x96, 0x77, 0x05,
	0x22, 0xe8, 0x9b, 0x78, 0xad, 0xee, 0x52, 0x9f, 0x16, 0x68, 0x52, 0xe0, 0x53, 0x28, 0x07, 0x97,
	0xde, 0x8a, 0xb5, 0x4b, 0x3d, 0xad, 0x6f, 0x4e, 0x0b, 0x34, 0x2d, 0xad, 0x9f, 0xc1, 0xc8, 0xf9,
	0x60, 0x13, 0x8c, 0xd7, 0x33, 0xdb, 0xb5, 0xcf, 0x5e, 0x9f, 0xdb, 0xd3, 0x33, 0x52, 0x40, 0x84,
	0x86, 0x33, 0x9f, 0x8d, 0xc6, 0x74, 0x87, 0x69, 0xd8, 0x85, 0xce, 0xdb, 0x97, 0xce, 0xd9, 0x64,
	0xec, 0x8e, 0xc6, 0xef, 0x66, 0xf6, 0xd8, 0x9d, 0xbf, 0xfa, 0x7e, 0xf6, 0xd2, 0x7d, 0x37, 0xa6,
	0xb3, 0xc9, 0x4f, 0xa4, 0x88, 0x55, 0xd0, 0x9d, 0x1f, 0x1c, 0x52, 0x1a, 0x56, 0xa0, 0xe4, 0x7b,
	0xd2, 0xb3, 0x16, 0x60, 0xda, 0x31, 0xf3, 0x24, 0x1b, 0x72, 0x49, 0xd9, 0x6f, 0x0f, 0x0d, 0xde,
	0x81, 0x5a, 0xe4, 0x09, 0x71, 0xc5, 0x63, 0x5f, 0x0d, 0x5d, 0xa7, 0xbb, 0x1a, 0x3f, 0x03, 0xc3,
	0x67, 0xef, 0x83, 0x25, 0x73, 0x05, 0x63, 0xbe, 0x9a, 0x4d, 0xa7, 0x90, 0x42, 0x0e, 0x63, 0xbe,
	0xd5, 0x84, 0x47, 0xb9, 0x1e, 0x22, 0xb2, 0x9e, 0x83, 0x39, 0x62, 0x6b, 0xf6, 0x81, 0xa6, 0x89,
	0x2e, 0x47, 0x13, 0x91, 0x65, 0x02, 0xcc, 0x03, 0x21, 0x53, 0x95, 0x35, 0x00, 0x63, 0x57, 0x89,
	0x08, 0x3f, 0x87, 0x5a, 0x62, 0xb2, 0x0e, 0x84, 0x6c, 0x6b, 0x3d, 0xbd, 0x6f, 0x0c, 0x6a, 0xdb,
	0x77, 0xa1, 0xd5, 0x05, 0x97, 0x09, 0xd7, 0xfa, 0x0e, 0x9a, 0x0e, 0x5f, 0xbf, 0x67, 0xdb, 0xc7,
	0x7f, 0x78, 0xe2, 0xa7, 0x50, 0x89, 0x99, 0xd8, 0xac, 0x65, 0x36, 0x6f, 0x56, 0x59, 0x08, 0x64,
	0xdf, 0x41, 0x44, 0xd6, 0x57, 0xd0, 0x98, 0x30, 0xb9, 0xbc, 0x78, 0x43, 0x6d, 0xee, 0xb3, 0xc4,
	0xf4, 0x60, 0x27, 0xda, 0xbd, 0x9d, 0xbc, 0x80, 0xd6, 0x9b, 0x0d, 0x8b, 0xaf, 0x53, 0x89, 0x23,
	0x3d, 0xb9, 0x11, 0x89, 0x90, 0x80, 0x2e, 0x82, 0x95, 0x12, 0x98, 0x34, 0xf9, 0x37, 0x77, 0xbf,
	0x62, 0x7e, 0x39, 0x7f, 0x16, 0xa1, 0x99, 0x8a, 0xe7, 0x7c, 0x15, 0x84, 0x6a, 0x05, 0xdf, 0x42,
	0x59, 0x48, 0x4f, 0x32, 0x25, 0x6f, 0x0c, 0x9e, 0xab, 0xf9, 0x0f, 0x48, 0xf9, 0x3a, 0x69, 0xcb,
	0x68, 0xaa, 0xc1, 0x4f, 0x01, 0x54, 0xee, 0xdc, 0x24, 0x17, 0xaa, 0x97, 0x49, 0xeb, 0x0a, 0x19,
	0x79, 0xd2, 0xdb, 0x5e, 0x4c, 0xdf, 0x5d, 0xcc, 0xfa, 0x43, 0x03, 0x72, 0x68, 0x86, 0x06, 0x54,
	0xdf, 0x86, 0xbf, 0x86, 0xfc, 0x2a, 0x24, 0x05, 0x6c, 0x6d, 0x09, 0xb3, 0xc4, 0x46, 0xad, 0x88,
	0x68, 0xd8, 0x86, 0x56, 0x8a, 0xfe, 0xe8, 0x05, 0x32, 0x08, 0x57, 0x13, 0x1e, 0x3b, 0x4b, 0x2f,
	0x24, 0x45, 0x7c, 0x06, 0x1f, 0x1d, 0x9e, 0xd8, 0x3c, 0xfc, 0x25, 0x88, 0x2f, 0x89, 0x8e, 0x27,
	0xf0, 0x28, 0x3d, 0x3c, 0x0f, 0x2e, 0x19, 0xdf, 0x48, 0x52, 0xc2, 0xc7, 0xdb, 0x15, 0x64, 0x2c,
	0xe6, 0x93, 0x72, 0xf2, 0x59, 0x64, 0xa0, 0x17, 0x2e, 0xd9, 0x9a, 0xf9, 0xa4, 0x32, 0xb8, 0x29,
	0x82, 0x31, 0x95, 0x32, 0x72, 0x58, 0x9c, 0xbc, 0x00, 0x0e, 0xa0, 0xbe, 0x4b, 0x24, 0x9e, 0xa8,
	0x35, 0xe5, 0xbf, 0x82, 0x0e, 0x1e, 0x42, 0x22, 0x4a, 0x34, 0xbb, 0x34, 0x66, 0x9a, 0x7c, 0x88,
	0x33, 0xcd, 0x5e, 0x60, 0xf1, 0x4b, 0xa8, 0x66, 0x11, 0xc5, 0xa6, 0x3a, 0xbe, 0x8b, 0x6f, 0x87,
	0xec, 0x03, 0xea, 0xf9, 0xcc, 0x7c, 0xb4, 0xb0, 0xa5, 0x18, 0x07, 0x79, 0xed, 0x3c, 0x39, 0x82,
	0x8a, 0x08, 0xbf, 0x01, 0x23, 0x97, 0x41, 0x7c, 0xac, 0x58, 0xfb, 0xa9, 0xec, 0xb4, 0x8e, 0x05,
	0x02, 0x47, 0x70, 0x72, 0x2f, 0x8a, 0xf8, 0x71, 0x4a, 0x3d, 0x12, 0xd1, 0xe3, 0x2e, 0x43, 0xf2,
	0xd7, 0x6d, 0x57, 0xfb, 0xfb, 0xb6, 0xab, 0xdd, 0xdc, 0x76, 0xb5, 0xdf, 0xff, 0xed, 0x16, 0x16,
	0x15, 0xf5, 0x1b, 0xfe, 0xf5, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xe0, 0x2f, 0x24, 0xd5,
	0x05, 0x00, 0x00,
}

func (m *Bot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Captcha != nil {
		{
			size, err := m.Captcha.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHttpDto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bot_Captcha) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bot_Captcha) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot_Captcha) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CaptchaType != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.CaptchaType))
		i--
		dAtA[i] = 0x10
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bot_Captcha_Url) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot_Captcha_Url) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Bot_Captcha_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot_Captcha_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Image != nil {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateBotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceSeed != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.DeviceSeed))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBotResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBotResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBotResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBotResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListBotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListBotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBotResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBotResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BotList) > 0 {
		for iNdEx := len(m.BotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHttpDto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SolveCaptchaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SolveCaptchaReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SolveCaptchaReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SolveCaptchaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SolveCaptchaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SolveCaptchaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FetchQRCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchQRCodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchQRCodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceSeed != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.DeviceSeed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQRCodeStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQRCodeStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQRCodeStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QRCodeLoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QRCodeLoginResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QRCodeLoginResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImageData) > 0 {
		i -= len(m.ImageData)
		copy(dAtA[i:], m.ImageData)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.ImageData)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHttpDto(dAtA []byte, offset int, v uint64) int {
	offset -= sovHttpDto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.IsOnline {
		n += 2
	}
	if m.Captcha != nil {
		l = m.Captcha.Size()
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bot_Captcha) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.CaptchaType != 0 {
		n += 1 + sovHttpDto(uint64(m.CaptchaType))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bot_Captcha_Url) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovHttpDto(uint64(l))
	return n
}
func (m *Bot_Captcha_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = len(m.Image)
		n += 1 + l + sovHttpDto(uint64(l))
	}
	return n
}
func (m *CreateBotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.DeviceSeed != 0 {
		n += 1 + sovHttpDto(uint64(m.DeviceSeed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBotResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBotResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBotResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BotList) > 0 {
		for _, e := range m.BotList {
			l = e.Size()
			n += 1 + l + sovHttpDto(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SolveCaptchaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SolveCaptchaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchQRCodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceSeed != 0 {
		n += 1 + sovHttpDto(uint64(m.DeviceSeed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryQRCodeStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QRCodeLoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovHttpDto(uint64(m.State))
	}
	l = len(m.ImageData)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHttpDto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHttpDto(x uint64) (n int) {
	return sovHttpDto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captcha", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Captcha == nil {
				m.Captcha = &Bot_Captcha{}
			}
			if err := m.Captcha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bot_Captcha) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Captcha: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Captcha: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaType", wireType)
			}
			m.CaptchaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptchaType |= Bot_Captcha_CaptchaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = &Bot_Captcha_Url{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &Bot_Captcha_Image{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSeed", wireType)
			}
			m.DeviceSeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceSeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotList = append(m.BotList, &Bot{})
			if err := m.BotList[len(m.BotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SolveCaptchaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SolveCaptchaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SolveCaptchaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SolveCaptchaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SolveCaptchaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SolveCaptchaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchQRCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchQRCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchQRCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSeed", wireType)
			}
			m.DeviceSeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceSeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQRCodeStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQRCodeStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQRCodeStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QRCodeLoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QRCodeLoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QRCodeLoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= QRCodeLoginResp_QRCodeLoginState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageData = append(m.ImageData[:0], dAtA[iNdEx:postIndex]...)
			if m.ImageData == nil {
				m.ImageData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHttpDto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHttpDto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHttpDto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHttpDto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHttpDto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHttpDto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHttpDto = fmt.Errorf("proto: unexpected end of group")
)
